
<%
var TAGNAME = 0
var CONTENT = 1
var ATTRS = 2
var ANCESTORS = 3
//check if an associative array is empty
function isaaEmpty(aa){
    for (key in aa)
        return false
    return true
}



//attrs is an associative array that holds attributes key-value pairs
function openTag(tagName, attrs){%>
    <<%= tagName %>
    <%for (attrKey in attrs){%>
        <%= attrKey %> = "<%= attrs[attrKey] %>"
    <%}%>
    >
<%}

function closeTag(tagName){%>
    </<%=tagName%>>
<%}

function insert(value){%>
    <%= value %>
<%}

function printAncestors(ancestorTags){
    if (! (ancestorTags instanceof Array))
        return
    for (var i = 0; i < ancestorTags.length; i++)
        openTag(ancestorTags[i])
}



function tagNode(tagName, value, attrs){
var tmp =
{
'tagName' : tagName,
'attrs' : attrs,
'isEmpty' : false,
'print' : function(){
    if(this.isEmpty)
        return
    for (var i = 0; i < this.value.length; i++){%>
    <<%= tagName %>
        <%for (attrKey in attrs){%>
            <%= attrKey %> = "<%= attrs[attrKey] %>"
        <%}%>
        ><%= this.value[i] %></<%=tagName%>>
    <%}
}
}
//take either one or array of values
if (value instanceof Array)
    tmp.value = value
else{
    tmp.value = [value]
    if (value == null)
        tmp.isEmpty = true
}

return tmp
}

function printTagNode(tagName, value, attrs){
    var tmp = tagNode(tagName, value, attrs)
    tmp.print()
}

function tagTree(tagName, children, attrs){
var tmp = {
'tagName' : tagName,
'attrs' : attrs,
'print' : function(){
    if(this.isEmpty)
        return
    for(var childIdx = 0; childIdx < this.children.length; childIdx++){
        openTag(this.tagName)

        var child = this.children[childIdx]
        for (var childTag =0; childTag <child.length; childTag++){
            child[childTag].print()
        }
        closeTag(this.tagName)
    }
}
}
if (!(children[0] instanceof Array))
    tmp.children = [children]
else
    tmp.children = children
tmp.isEmpty = true
for (var childIdx = 0; childIdx < tmp.children.length; childIdx++){
    var child = tmp.children[childIdx]
    for (var childTag =0; childTag <child.length; childTag++){
        if (!(child[childTag].isEmpty)){
            tmp.isEmpty = false
            break
        }
    }if(!tmp.isEmpty)
        break
}
return tmp
}

function printTagTree(tagName, children, attrs){
    var tmp = tagTree(tagName, children, attrs)
    tmp.print()
}
%>

<?xml version="1.0" encoding="utf-8"?>
<ReviseSellingManagerProductRequest xmlns="urn:ebay:apis:eBLBaseComponents"><%
    printTagTree('RequesterCredentials', [tagNode('eBayAuthToken', params['RequesterCredentials.eBayAuthToken'])])
    printTagNode('ErrorLanguage', params.ErrorLanguage)
    printTagNode('MessageID', params.MessageID)
    printTagNode('Version', params.Version)
    printTagNode('WarningLevel', params.WarningLevel)
    printTagNode('DeletedField', params.DeletedField)
    printTagTree('SellingManagerFolderDetails', [
        tagNode('FolderID', params['SellingManagerFolderDetails.FolderID'])])
    printTagTree('SellingManagerProductDetails', [
        tagNode('CustomLabel', params['SellingManagerProductDetails.CustomLabel']), 
        tagNode('ProductID', params['SellingManagerProductDetails.ProductID']), 
        tagNode('ProductName', params['SellingManagerProductDetails.ProductName']), 
        tagNode('QuantityAvailable', params['SellingManagerProductDetails.QuantityAvailable']), 
        tagNode('RestockAlert', params['SellingManagerProductDetails.RestockAlert']), 
        tagNode('RestockThreshold', params['SellingManagerProductDetails.RestockThreshold']), 
        tagNode('UnitCost', params['SellingManagerProductDetails.UnitCost'])])
    printTagTree('SellingManagerProductSpecifics', [
        tagTree('ItemSpecifics', [
            tagTree('NameValueList', [
                tagNode('Name', params['SellingManagerProductSpecifics.ItemSpecifics.NameValueList.Name']), 
                tagNode('Value', params['SellingManagerProductSpecifics.ItemSpecifics.NameValueList.Value'])])]), 
        tagNode('PrimaryCategoryID', params['SellingManagerProductSpecifics.PrimaryCategoryID']),
        tagTree('Variations', [
            tagTree('Pictures', [
                tagNode('VariationSpecificName', params['SellingManagerProductSpecifics.Variations.Pictures.VariationSpecificName']),
                tagTree('VariationSpecificPictureSet', [
                    tagNode('PictureURL', params['SellingManagerProductSpecifics.Variations.Pictures.VariationSpecificPictureSet.PictureURL']), 
                    tagNode('VariationSpecificValue', params['SellingManagerProductSpecifics.Variations.Pictures.VariationSpecificPictureSet.VariationSpecificValue'])])]),
            tagTree('Variation', [
                tagNode('Quantity', params['SellingManagerProductSpecifics.Variations.Variation.Quantity']), 
                tagNode('SKU', params['SellingManagerProductSpecifics.Variations.Variation.SKU']), 
                tagNode('StartPrice', params['SellingManagerProductSpecifics.Variations.Variation.StartPrice']), 
                tagNode('UnitCost', params['SellingManagerProductSpecifics.Variations.Variation.UnitCost']), 
                tagNode('UnitsAvailable', params['SellingManagerProductSpecifics.Variations.Variation.UnitsAvailable']),
                tagTree('VariationSpecifics', [
                    tagTree('NameValueList', [
                        tagNode('Name', params['SellingManagerProductSpecifics.Variations.Variation.VariationSpecifics.NameValueList.Name']), 
                        tagNode('Value', params['SellingManagerProductSpecifics.Variations.Variation.VariationSpecifics.NameValueList.Value'])])])]),
            tagTree('VariationSpecificsSet', [
                tagTree('NameValueList', [
                    tagNode('Name', params['SellingManagerProductSpecifics.Variations.VariationSpecificsSet.NameValueList.Name']), 
                    tagNode('Value', params['SellingManagerProductSpecifics.Variations.VariationSpecificsSet.NameValueList.Value'])])])])])
%></ReviseSellingManagerProductRequest>