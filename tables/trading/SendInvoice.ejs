
<%
var TAGNAME = 0
var CONTENT = 1
var ATTRS = 2
var ANCESTORS = 3
//check if an associative array is empty
function isaaEmpty(aa){
    for (key in aa)
        return false
    return true
}



//attrs is an associative array that holds attributes key-value pairs
function openTag(tagName, attrs){%>
    <<%= tagName %>
    <%for (attrKey in attrs){%>
        <%= attrKey %> = "<%= attrs[attrKey] %>"
    <%}%>
    >
<%}

function closeTag(tagName){%>
    </<%=tagName%>>
<%}

function insert(value){%>
    <%= value %>
<%}

function printAncestors(ancestorTags){
    if (! (ancestorTags instanceof Array))
        return
    for (var i = 0; i < ancestorTags.length; i++)
        openTag(ancestorTags[i])
}



function tagNode(tagName, value, attrs){
var tmp =
{
'tagName' : tagName,
'attrs' : attrs,
'isEmpty' : false,
'print' : function(){
    if(this.isEmpty)
        return
    for (var i = 0; i < this.value.length; i++){%>
    <<%= tagName %>
        <%for (attrKey in attrs){%>
            <%= attrKey %> = "<%= attrs[attrKey] %>"
        <%}%>
        ><%= this.value[i] %></<%=tagName%>>
    <%}
}
}
//take either one or array of values
if (value instanceof Array)
    tmp.value = value
else{
    tmp.value = [value]
    if (value == null)
        tmp.isEmpty = true
}

return tmp
}

function printTagNode(tagName, value, attrs){
    var tmp = tagNode(tagName, value, attrs)
    tmp.print()
}

function tagTree(tagName, children, attrs){
var tmp = {
'tagName' : tagName,
'attrs' : attrs,
'print' : function(){
    if(this.isEmpty)
        return
    for(var childIdx = 0; childIdx < this.children.length; childIdx++){
        openTag(this.tagName)

        var child = this.children[childIdx]
        for (var childTag =0; childTag <child.length; childTag++){
            child[childTag].print()
        }
        closeTag(this.tagName)
    }
}
}
if (!(children[0] instanceof Array))
    tmp.children = [children]
else
    tmp.children = children
tmp.isEmpty = true
for (var childIdx = 0; childIdx < tmp.children.length; childIdx++){
    var child = tmp.children[childIdx]
    for (var childTag =0; childTag <child.length; childTag++){
        if (!(child[childTag].isEmpty)){
            tmp.isEmpty = false
            break
        }
    }if(!tmp.isEmpty)
        break
}
return tmp
}

function printTagTree(tagName, children, attrs){
    var tmp = tagTree(tagName, children, attrs)
    tmp.print()
}
%>

<?xml version="1.0" encoding="utf-8"?>
<SendInvoiceRequest xmlns="urn:ebay:apis:eBLBaseComponents"><%
    printTagTree('RequesterCredentials', [tagNode('eBayAuthToken', params['RequesterCredentials.eBayAuthToken'])])
    printTagNode('ErrorLanguage', params.ErrorLanguage)
    printTagNode('MessageID', params.MessageID)
    printTagNode('Version', params.Version)
    printTagNode('WarningLevel', params.WarningLevel)
    printTagNode('CheckoutInstructions', params.CheckoutInstructions)
    printTagNode('CODCost', params.CODCost, {
    currencyID : params['CODCost.currencyID']})
    printTagNode('EmailCopyToSeller', params.EmailCopyToSeller)
    printTagNode('InsuranceFee', params.InsuranceFee, {
    currencyID : params['InsuranceFee.currencyID']})
    printTagNode('InsuranceOption', params.InsuranceOption)
    printTagTree('InternationalShippingServiceOptions', [
        tagNode('ShippingInsuranceCost', params['InternationalShippingServiceOptions.ShippingInsuranceCost'], {
        currencyID : params['InternationalShippingServiceOptions.ShippingInsuranceCost.currencyID']}), 
        tagNode('ShippingService', params['InternationalShippingServiceOptions.ShippingService']), 
        tagNode('ShippingServiceAdditionalCost', params['InternationalShippingServiceOptions.ShippingServiceAdditionalCost'], {
        currencyID : params['InternationalShippingServiceOptions.ShippingServiceAdditionalCost.currencyID']}), 
        tagNode('ShippingServiceCost', params['InternationalShippingServiceOptions.ShippingServiceCost'], {
        currencyID : params['InternationalShippingServiceOptions.ShippingServiceCost.currencyID']}), 
        tagNode('ShippingServicePriority', params['InternationalShippingServiceOptions.ShippingServicePriority']), 
        tagNode('ShipToLocation', params['InternationalShippingServiceOptions.ShipToLocation'])])
    printTagNode('ItemID', params.ItemID)
    printTagNode('OrderID', params.OrderID)
    printTagNode('OrderLineItemID', params.OrderLineItemID)
    printTagNode('PaymentMethods', params.PaymentMethods)
    printTagNode('PayPalEmailAddress', params.PayPalEmailAddress)
    printTagTree('SalesTax', [
        tagNode('SalesTaxAmount', params['SalesTax.SalesTaxAmount'], {
        currencyID : params['SalesTax.SalesTaxAmount.currencyID']}), 
        tagNode('SalesTaxPercent', params['SalesTax.SalesTaxPercent']), 
        tagNode('SalesTaxState', params['SalesTax.SalesTaxState']), 
        tagNode('ShippingIncludedInTax', params['SalesTax.ShippingIncludedInTax'])])
    printTagTree('ShippingServiceOptions', [
        tagNode('ShippingInsuranceCost', params['ShippingServiceOptions.ShippingInsuranceCost'], {
        currencyID : params['ShippingServiceOptions.ShippingInsuranceCost.currencyID']}), 
        tagNode('ShippingService', params['ShippingServiceOptions.ShippingService']), 
        tagNode('ShippingServiceAdditionalCost', params['ShippingServiceOptions.ShippingServiceAdditionalCost'], {
        currencyID : params['ShippingServiceOptions.ShippingServiceAdditionalCost.currencyID']}), 
        tagNode('ShippingServiceCost', params['ShippingServiceOptions.ShippingServiceCost'], {
        currencyID : params['ShippingServiceOptions.ShippingServiceCost.currencyID']}), 
        tagNode('ShippingServicePriority', params['ShippingServiceOptions.ShippingServicePriority']), 
        tagNode('ShippingSurcharge', params['ShippingServiceOptions.ShippingSurcharge'], {
        currencyID : params['ShippingServiceOptions.ShippingSurcharge.currencyID']})])
    printTagNode('SKU', params.SKU)
    printTagNode('TransactionID', params.TransactionID)
%></SendInvoiceRequest>