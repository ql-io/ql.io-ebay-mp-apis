<%
TAGNAME = 0
CONTENT = 1
ATTRS = 2
ANCESTORS = 3
//check if an associative array is empty
function isaaEmpty(aa){
    for (key in aa)
        return false
    return true
}

//attrs is an associative array that holds attributes key-value pairs
function openTag(tagName, attrs){%>
    <<%= tagName %>
    <%for (attrKey in attrs){%>
        <%= attrKey %> = <%= attrs[attrKey] %>
    <%}%>
    >
<%}

function closeTag(tagName){%>
    </<%=tagName%>>
<%}

function insert(value){%>
    <%= value %>
<%}

function printAncestors(ancestorTags){
    if (! (ancestorTags instanceof Array))
        return
    for (var i = 0; i < ancestorTags.length; i++)
        openTag(ancestorTags[i])
}

function tagNode(tagName, value, attrs,ancestorTags){
   if (value == null)
       return false
   printAncestors(ancestorTags)%>
   <<%=tagName%>><%= value %></<%=tagName%>><%
   //openTag(tagName, attrs)
   //insert(value)
   //closeTag(tagName)
   return true
}

function tagTree(tagName, children, attrs, ancestorTags){
    var isEmpty = isaaEmpty(attrs)
    if(!isEmpty){
        printAncestors(ancestorTags)
        openTag(tagName, attrs)
        ancestorTags = null
    }else{// keep the this open tag to be inserted later
        if (ancestorTags instanceof Array){
            ancestorTags.push(tagName)
        }else{
            ancestorTags = [tagName]
        }
    }
    for (var i=0; i< children.length; i++){
        child = children[i]
        if (child[CONTENT] instanceof Array){
            //tree
            //TAGNAME = 0
            //CONTENT = 1
            //ATTRS = 2
            //ANCESTORS = 3
            var hasContent = tagTree(child[TAGNAME], child[CONTENT], child[ATTRS], ancestorTags)
            if (isEmpty && hasContent){
                isEmpty = false
                ancestorTags = null
            }
        }else{
            //node
            var hasContent = tagNode(child[TAGNAME], child[CONTENT], child[ATTRS], ancestorTags)
            if (isEmpty && hasContent){
                isEmpty = false
                ancestorTags = null
            }
        }
    }if (!isEmpty){
        closeTag(tagName)
        return true
    }return false
}
%>

<?xml version="1.0" encoding="utf-8"?>
<GetItemRequest xmlns="urn:ebay:apis:eBLBaseComponents"><%
    tagNode('DetailLevel', params.DetailLevel)
    tagNode('ErrorLanguage', params.ErrorLanguage)
    tagNode('MessageID', params.MessageID)
    tagNode('OutputSelector', params.OutputSelector)
    tagNode('Version', params.Version)
    tagNode('WarningLevel', params.WarningLevel)
    tagNode('IncludeCrossPromotion', params.IncludeCrossPromotion)
    tagNode('IncludeItemCompatibilityList', params.IncludeItemCompatibilityList)
    tagNode('IncludeItemSpecifics', params.IncludeItemSpecifics)
    tagNode('IncludeTaxTable', params.IncludeTaxTable)
    tagNode('IncludeWatchCount', params.IncludeWatchCount)
    tagNode('ItemID', params.ItemID)
    tagNode('SKU', params.SKU)
    tagNode('TransactionID', params.TransactionID)
    tagNode('VariationSpecifics', params.VariationSpecifics)
    tagTree('VariationSpecifics', [['NameValueList', [['Name', params['VariationSpecifics.NameValueList.Name']],
                                                      ['Value', params['VariationSpecifics.NameValueList.Value']]]]])
    tagTree('RequesterCredentials', [['eBayAuthToken', params.eBayAuthToken]])


%></GetItemRequest>