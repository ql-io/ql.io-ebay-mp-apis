
<%
var TAGNAME = 0
var CONTENT = 1
var ATTRS = 2
var ANCESTORS = 3
//check if an associative array is empty
function isaaEmpty(aa){
    for (key in aa)
        return false
    return true
}



//attrs is an associative array that holds attributes key-value pairs
function openTag(tagName, attrs){%>
    <<%= tagName %>
    <%for (attrKey in attrs){%>
        <%= attrKey %> = "<%= attrs[attrKey] %>"
    <%}%>
    >
<%}

function closeTag(tagName){%>
    </<%=tagName%>>
<%}

function insert(value){%>
    <%= value %>
<%}

function printAncestors(ancestorTags){
    if (! (ancestorTags instanceof Array))
        return
    for (var i = 0; i < ancestorTags.length; i++)
        openTag(ancestorTags[i])
}



function tagNode(tagName, value, attrs){
var tmp =
{
'tagName' : tagName,
'attrs' : attrs,
'isEmpty' : false,
'print' : function(){
    if(this.isEmpty)
        return
    for (var i = 0; i < this.value.length; i++){%>
    <<%= tagName %>
        <%for (attrKey in attrs){%>
            <%= attrKey %> = "<%= attrs[attrKey] %>"
        <%}%>
        ><%= this.value[i] %></<%=tagName%>>
    <%}
}
}
//take either one or array of values
if (value instanceof Array)
    tmp.value = value
else{
    tmp.value = [value]
    if (value == null)
        tmp.isEmpty = true
}

return tmp
}

function printTagNode(tagName, value, attrs){
    var tmp = tagNode(tagName, value, attrs)
    tmp.print()
}

function tagTree(tagName, children, attrs){
var tmp = {
'tagName' : tagName,
'attrs' : attrs,
'print' : function(){
    if(this.isEmpty)
        return
    for(var childIdx = 0; childIdx < this.children.length; childIdx++){
        openTag(this.tagName)

        var child = this.children[childIdx]
        for (var childTag =0; childTag <child.length; childTag++){
            child[childTag].print()
        }
        closeTag(this.tagName)
    }
}
}
if (!(children[0] instanceof Array))
    tmp.children = [children]
else
    tmp.children = children
tmp.isEmpty = true
for (var childIdx = 0; childIdx < tmp.children.length; childIdx++){
    var child = tmp.children[childIdx]
    for (var childTag =0; childTag <child.length; childTag++){
        if (!(child[childTag].isEmpty)){
            tmp.isEmpty = false
            break
        }
    }if(!tmp.isEmpty)
        break
}
return tmp
}

function printTagTree(tagName, children, attrs){
    var tmp = tagTree(tagName, children, attrs)
    tmp.print()
}
%>

<?xml version="1.0" encoding="utf-8"?>
<SetStoreRequest xmlns="urn:ebay:apis:eBLBaseComponents"><%
    printTagTree('RequesterCredentials', [tagNode('eBayAuthToken', params['RequesterCredentials.eBayAuthToken'])])
    printTagNode('ErrorLanguage', params.ErrorLanguage)
    printTagNode('MessageID', params.MessageID)
    printTagNode('Version', params.Version)
    printTagNode('WarningLevel', params.WarningLevel)
    printTagTree('Store', [
        tagNode('CustomHeader', params['Store.CustomHeader']), 
        tagNode('CustomHeaderLayout', params['Store.CustomHeaderLayout']),
        tagTree('CustomListingHeader', [
            tagNode('AddToFavoriteStores', params['Store.CustomListingHeader.AddToFavoriteStores']), 
            tagNode('DisplayType', params['Store.CustomListingHeader.DisplayType']),
            tagTree('LinkToInclude', [
                tagNode('LinkID', params['Store.CustomListingHeader.LinkToInclude.LinkID']), 
                tagNode('LinkType', params['Store.CustomListingHeader.LinkToInclude.LinkType']), 
                tagNode('Order', params['Store.CustomListingHeader.LinkToInclude.Order'])]), 
            tagNode('Logo', params['Store.CustomListingHeader.Logo']), 
            tagNode('SearchBox', params['Store.CustomListingHeader.SearchBox']), 
            tagNode('SignUpForStoreNewsletter', params['Store.CustomListingHeader.SignUpForStoreNewsletter'])]), 
        tagNode('Description', params['Store.Description']), 
        tagNode('ExportListings', params['Store.ExportListings']), 
        tagNode('HeaderStyle', params['Store.HeaderStyle']), 
        tagNode('HomePage', params['Store.HomePage']), 
        tagNode('ItemListLayout', params['Store.ItemListLayout']), 
        tagNode('ItemListSortOrder', params['Store.ItemListSortOrder']), 
        tagNode('LastOpenedTime', params['Store.LastOpenedTime']),
        tagTree('Logo', [
            tagNode('LogoID', params['Store.Logo.LogoID']), 
            tagNode('Name', params['Store.Logo.Name']), 
            tagNode('URL', params['Store.Logo.URL'])]), 
        tagNode('MerchDisplay', params['Store.MerchDisplay']), 
        tagNode('Name', params['Store.Name']), 
        tagNode('SubscriptionLevel', params['Store.SubscriptionLevel']),
        tagTree('Theme', [
            tagTree('ColorScheme', [
                tagTree('Color', [
                    tagNode('Accent', params['Store.Theme.ColorScheme.Color.Accent']), 
                    tagNode('Primary', params['Store.Theme.ColorScheme.Color.Primary']), 
                    tagNode('Secondary', params['Store.Theme.ColorScheme.Color.Secondary'])]), 
                tagNode('ColorSchemeID', params['Store.Theme.ColorScheme.ColorSchemeID']),
                tagTree('Font', [
                    tagNode('DescColor', params['Store.Theme.ColorScheme.Font.DescColor']), 
                    tagNode('DescFace', params['Store.Theme.ColorScheme.Font.DescFace']), 
                    tagNode('DescSize', params['Store.Theme.ColorScheme.Font.DescSize']), 
                    tagNode('NameColor', params['Store.Theme.ColorScheme.Font.NameColor']), 
                    tagNode('NameFace', params['Store.Theme.ColorScheme.Font.NameFace']), 
                    tagNode('NameSize', params['Store.Theme.ColorScheme.Font.NameSize']), 
                    tagNode('TitleColor', params['Store.Theme.ColorScheme.Font.TitleColor']), 
                    tagNode('TitleFace', params['Store.Theme.ColorScheme.Font.TitleFace']), 
                    tagNode('TitleSize', params['Store.Theme.ColorScheme.Font.TitleSize'])]), 
                tagNode('Name', params['Store.Theme.ColorScheme.Name'])]), 
            tagNode('Name', params['Store.Theme.Name']), 
            tagNode('ThemeID', params['Store.Theme.ThemeID'])]), 
        tagNode('TitleWithCompatibility', params['Store.TitleWithCompatibility']), 
        tagNode('URL', params['Store.URL']), 
        tagNode('URLPath', params['Store.URLPath'])])
%></SetStoreRequest>